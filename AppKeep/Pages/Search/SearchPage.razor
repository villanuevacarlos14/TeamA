@page "/"
@page "/search"
@using AppKeep.Service
@using AppKeep.Domain
@using Microsoft.AspNetCore.Http
@attribute [Authorize]
@inject IUpkeepTemplateService appkeepProfileTemplateService
@inject IHttpContextAccessor httpContextAccessor
@inherits PageBase
@inject NavigationManager Navigation

@if (isVisible)
{
    <SearchComponent SearchValueChanged="SearchValueChanged" IsCompact="@isCompact" />
    <div class="container pt-2" style="max-height: 800px; margin-bottom: 30px;">
        <div class="progress" hidden="isHidden">
            <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" style="width: 100%"></div>
        </div>
        <SearchListComponent @ref="child" Templates="templates"></SearchListComponent>

    </div>
    <div class="row text-center">

        <div class="col-md-12 text-center">
            <span>OR</span>
            <br />
            <br />
            <AppKeep.Web.Pages.SetupMachine.NewMachineButton></AppKeep.Web.Pages.SetupMachine.NewMachineButton>
        </div>
    </div>
}
else
{
    <div class="row">
        <div class="col-12 text-center">
            <br />
            <br />
            <br />
            <div><img src="images/spinner.gif" /></div>
            <br />
            <div>Loading, please wait...</div>
        </div>
    </div>
}
@if (!isCompact)
{
    <div style="min-height: 700px;"></div>
}

@code{

    private AppKeep.Web.Pages.Search.SearchListComponent child;
    private bool isHidden { get; set; } = true;
    private IEnumerable<UpkeepTemplate> templates { get; set; } = new List<UpkeepTemplate>();
    private bool isVisible = false;
    private bool isCompact = false;

    [Parameter]
    public bool IsCompact { get; set; }

    private async Task SearchValueChanged(string searchValue)
    {
        isHidden = false;
        templates = await appkeepProfileTemplateService.GetTemplatesFilteredByMachineNameAsync(searchValue);
        child.ResetSearchList();
        isHidden = true;
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (GetUserType() == UserTypeEnum.Assistant)
        {
            Navigation.NavigateTo("myPlans");
        }
        else
        {
            isVisible = true;
            isCompact = IsCompact;
        }
    }

    protected override void OnInitialized()
    {
        System.Diagnostics.Debug.WriteLine($"UserId: {GetUserId()}");
        Console.WriteLine($"UserId: {GetUserId()}");
    }

    private int GetUserId()
    {
        int userId = 0;

        if (httpContextAccessor.HttpContext.User.Identity.IsAuthenticated)
        {
            var claim = httpContextAccessor.HttpContext.User.Claims.FirstOrDefault(c => c.Type == "UserId");

            if (claim != null && Int32.TryParse(claim.Value, out int claimUserId))
            {
                userId = claimUserId;
            }
        }

        return userId;
    }
}